/** @format */
import { useEffect, useState } from "react";
import Time from "./Time";
import styles from "../../../OneOff/TimeBased/Time.module.css";

import { useLocation, useNavigate } from "react-router-dom";
import axios from "axios";
import { toast } from "react-toastify";
export default function DateTime({ retainerService, setRetainerService }) {
  const location = useLocation();
  const EditRetainer = location.state || {};
  console.log(EditRetainer);

  const navigate = useNavigate();

  const dayInfo = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
  ];

  function getInitialTimes(editAvailability, dayInfo, type) {
    const result = {};
    if (Array.isArray(editAvailability)) {
      dayInfo.forEach((day, idx) => {
        const found = editAvailability.find((a) => a.day === day);
        if (found) {
          result[idx] = type === "from" ? found.from_time : found.to_time;
        }
      });
    }
    return result;
  }

  function getInitialCheckedDays(editAvailability, dayInfo) {
    const result = {};
    if (Array.isArray(editAvailability)) {
      dayInfo.forEach((day, idx) => {
        const found = editAvailability.find((a) => a.day === day);
        if (found) {
          result[idx] = true;
        }
      });
    }
    return result;
  }

  const [selectedFrom, setSelectedFrom] = useState(() =>
    getInitialTimes(EditRetainer.availability, dayInfo, "from")
  );
  const [selectedTo, setSelectedTo] = useState(() =>
    getInitialTimes(EditRetainer.availability, dayInfo, "to")
  );
  const [checkedDays, setCheckedDays] = useState(() =>
    getInitialCheckedDays(EditRetainer.availability, dayInfo)
  );
  function Submit() {
    const availability = dayInfo.reduce((acc, day, index) => {
      if (checkedDays[index]) {
        acc.push({
          day,
          from_time: selectedFrom[index] || "9:00 AM",
          to_time: selectedTo[index] || "9:00 AM",
        });
      }
      return acc;
    }, []);

    console.log(availability);
    const dataToSend = {
      ...retainerService,
      availability,
    };

    setRetainerService(dataToSend);
    const token = localStorage.getItem("Token");

    if (!EditRetainer) {
      axios
        .post("https://api.luround.com/v1/services/create", dataToSend, {
          headers: { Authorization: `Bearer ${token}` },
        })
        .then((res) => {
          console.log(res.data);

          console.log("Data sent:", dataToSend);
          toast.success("Service created sucessfully");

          setTimeout(() => {
            navigate("/retainer", { state: dataToSend });
          }, 2000);
        })
        .catch((err) => {
          console.error("Error sending data:", err);
        });
    }

    if (EditRetainer) {
      axios
        .put(
          `https://api.luround.com/v1/services/edit?serviceId=${EditRetainer._id}`,
          dataToSend,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        )
        .then((res) => {
          toast.success("Service Edited sucessfully");
          setTimeout(() => {
            navigate("/retainer", { state: dataToSend });
          }, 2000);
        })
        .catch((err) => {
          console.log(err);
        });
    }
  }

  useEffect(() => {
    if (Object.keys(retainerService).length > 0) {
    }
  }, [retainerService]);

  return (
    <section className={styles.section}>
      <div className={styles.create}>
        <div>
          <span>Create retainer service</span>
          <svg
            width='111'
            height='24'
            viewBox='0 0 111 24'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
          >
            <rect width='111' height='24' rx='12' fill='#F2FDFD' />
            <rect x='8' y='4' width='16' height='16' rx='8' fill='#D8FDFD' />
            <circle cx='16' cy='12' r='4' fill='#00CCCC' />
            <path
              d='M29.0766 8.56108V7.54545H36.1675V8.56108H33.1945V17H32.0496V8.56108H29.0766ZM37.7867 17V9.90909H38.8762V17H37.7867ZM38.3407 8.72727C38.1283 8.72727 37.9452 8.65495 37.7913 8.5103C37.6405 8.36565 37.5651 8.19176 37.5651 7.98864C37.5651 7.78551 37.6405 7.61162 37.7913 7.46697C37.9452 7.32232 38.1283 7.25 38.3407 7.25C38.553 7.25 38.7346 7.32232 38.8854 7.46697C39.0393 7.61162 39.1163 7.78551 39.1163 7.98864C39.1163 8.19176 39.0393 8.36565 38.8854 8.5103C38.7346 8.65495 38.553 8.72727 38.3407 8.72727ZM40.8717 17V9.90909H41.9242V11.017H42.0166C42.1643 10.6385 42.4028 10.3446 42.7321 10.1353C43.0614 9.92294 43.4569 9.81676 43.9185 9.81676C44.3863 9.81676 44.7757 9.92294 45.0865 10.1353C45.4004 10.3446 45.6451 10.6385 45.8205 11.017H45.8944C46.076 10.6508 46.3484 10.36 46.7115 10.1445C47.0747 9.92602 47.5102 9.81676 48.018 9.81676C48.652 9.81676 49.1706 10.0153 49.5737 10.4123C49.9769 10.8062 50.1785 11.4202 50.1785 12.2543V17H49.089V12.2543C49.089 11.7311 48.9459 11.3571 48.6597 11.1325C48.3734 10.9078 48.0364 10.7955 47.6487 10.7955C47.1501 10.7955 46.7638 10.9463 46.4899 11.2479C46.216 11.5464 46.0791 11.925 46.0791 12.3835V17H44.9711V12.1435C44.9711 11.7403 44.8403 11.4156 44.5787 11.1694C44.3171 10.9201 43.9801 10.7955 43.5677 10.7955C43.2845 10.7955 43.0199 10.8709 42.7737 11.0217C42.5305 11.1725 42.3336 11.3817 42.1828 11.6495C42.035 11.9142 41.9612 12.2204 41.9612 12.5682V17H40.8717ZM55.1435 17.1477C54.4603 17.1477 53.8709 16.9969 53.3754 16.6953C52.883 16.3906 52.5029 15.9659 52.2351 15.4212C51.9705 14.8733 51.8381 14.2363 51.8381 13.5099C51.8381 12.7836 51.9705 12.1435 52.2351 11.5895C52.5029 11.0324 52.8753 10.5985 53.3523 10.2876C53.8324 9.97372 54.3926 9.81676 55.0327 9.81676C55.402 9.81676 55.7667 9.87831 56.1268 10.0014C56.4869 10.1245 56.8147 10.3246 57.1101 10.6016C57.4056 10.8755 57.641 11.2386 57.8165 11.6911C57.9919 12.1435 58.0796 12.7005 58.0796 13.3622V13.8239H52.6137V12.8821H56.9716C56.9716 12.482 56.8916 12.125 56.7316 11.8111C56.5746 11.4972 56.3499 11.2494 56.0576 11.0678C55.7683 10.8862 55.4267 10.7955 55.0327 10.7955C54.5988 10.7955 54.2233 10.9032 53.9063 11.1186C53.5924 11.331 53.3508 11.608 53.1815 11.9496C53.0122 12.2912 52.9276 12.6574 52.9276 13.0483V13.6761C52.9276 14.2116 53.0199 14.6656 53.2046 15.038C53.3923 15.4073 53.6524 15.6889 53.9848 15.8828C54.3172 16.0736 54.7034 16.169 55.1435 16.169C55.4297 16.169 55.6883 16.129 55.9191 16.049C56.153 15.9659 56.3546 15.8428 56.5238 15.6797C56.6931 15.5135 56.8239 15.3073 56.9162 15.0611L57.9688 15.3565C57.858 15.7135 57.6718 16.0275 57.4102 16.2983C57.1486 16.5661 56.8254 16.7753 56.4407 16.9261C56.056 17.0739 55.6236 17.1477 55.1435 17.1477ZM63.7994 12.4389V13.4545H59.663V12.4389H63.7994ZM65.8641 17V7.54545H66.9536V11.0355H67.0459C67.126 10.9124 67.2368 10.7554 67.3783 10.5646C67.523 10.3707 67.7292 10.1984 67.9969 10.0476C68.2678 9.8937 68.634 9.81676 69.0957 9.81676C69.6927 9.81676 70.219 9.96603 70.6745 10.2646C71.13 10.5631 71.4855 10.9863 71.7409 11.5341C71.9963 12.0819 72.1241 12.7282 72.1241 13.473C72.1241 14.224 71.9963 14.8749 71.7409 15.4258C71.4855 15.9736 71.1315 16.3983 70.6791 16.6999C70.2267 16.9985 69.705 17.1477 69.1141 17.1477C68.6586 17.1477 68.2939 17.0723 68.02 16.9215C67.7461 16.7676 67.5353 16.5937 67.3876 16.3999C67.2398 16.2029 67.126 16.0398 67.0459 15.9105H66.9167V17H65.8641ZM66.9351 13.4545C66.9351 13.9901 67.0136 14.4625 67.1706 14.8718C67.3275 15.2781 67.5568 15.5966 67.8584 15.8274C68.1601 16.0552 68.5294 16.169 68.9664 16.169C69.4219 16.169 69.802 16.049 70.1067 15.8089C70.4144 15.5658 70.6453 15.2396 70.7991 14.8303C70.9561 14.4179 71.0346 13.9593 71.0346 13.4545C71.0346 12.956 70.9576 12.5066 70.8038 12.1065C70.653 11.7034 70.4237 11.3848 70.1159 11.1509C69.8112 10.9139 69.428 10.7955 68.9664 10.7955C68.5232 10.7955 68.1508 10.9078 67.8492 11.1325C67.5476 11.354 67.3199 11.6649 67.166 12.065C67.0121 12.462 66.9351 12.9252 66.9351 13.4545ZM75.8773 17.1662C75.4279 17.1662 75.0201 17.0816 74.6539 16.9123C74.2877 16.7399 73.9968 16.4922 73.7814 16.169C73.5659 15.8428 73.4582 15.4489 73.4582 14.9872C73.4582 14.581 73.5382 14.2517 73.6983 13.9993C73.8583 13.7438 74.0722 13.5438 74.34 13.3991C74.6077 13.2545 74.9032 13.1468 75.2263 13.076C75.5526 13.0021 75.8803 12.9437 76.2097 12.9006C76.6405 12.8452 76.9898 12.8036 77.2576 12.7759C77.5284 12.7451 77.7254 12.6944 77.8485 12.6236C77.9747 12.5528 78.0378 12.4297 78.0378 12.2543V12.2173C78.0378 11.7618 77.9131 11.4079 77.6638 11.1555C77.4176 10.9032 77.0437 10.777 76.542 10.777C76.0219 10.777 75.6141 10.8909 75.3187 11.1186C75.0232 11.3464 74.8155 11.5895 74.6954 11.848L73.6614 11.4787C73.846 11.0478 74.0922 10.7124 74.4 10.4723C74.7108 10.2292 75.0494 10.0599 75.4156 9.96449C75.7849 9.866 76.1481 9.81676 76.5051 9.81676C76.7329 9.81676 76.9945 9.84446 77.2899 9.89986C77.5884 9.95218 77.8762 10.0614 78.1532 10.2276C78.4333 10.3938 78.6656 10.6446 78.8503 10.9801C79.0349 11.3156 79.1273 11.7649 79.1273 12.3281V17H78.0378V16.0398H77.9824C77.9085 16.1937 77.7854 16.3583 77.6131 16.5337C77.4407 16.7092 77.2114 16.8584 76.9252 16.9815C76.639 17.1046 76.2897 17.1662 75.8773 17.1662ZM76.0435 16.1875C76.4743 16.1875 76.8375 16.1029 77.1329 15.9336C77.4315 15.7643 77.6561 15.5458 77.807 15.2781C77.9608 15.0103 78.0378 14.7287 78.0378 14.4332V13.4361C77.9916 13.4915 77.89 13.5423 77.7331 13.5884C77.5792 13.6315 77.4007 13.67 77.1976 13.7038C76.9975 13.7346 76.8021 13.7623 76.6113 13.7869C76.4235 13.8085 76.2712 13.8269 76.1543 13.8423C75.8711 13.8793 75.6064 13.9393 75.3602 14.0224C75.1171 14.1024 74.9201 14.224 74.7693 14.3871C74.6216 14.5471 74.5477 14.7656 74.5477 15.0426C74.5477 15.4212 74.6878 15.7074 74.9678 15.9013C75.251 16.0921 75.6095 16.1875 76.0435 16.1875ZM86.1385 11.4972L85.1598 11.7741C85.0983 11.611 85.0075 11.4525 84.8875 11.2987C84.7705 11.1417 84.6105 11.0124 84.4074 10.9109C84.2042 10.8093 83.9442 10.7585 83.6272 10.7585C83.1932 10.7585 82.8316 10.8585 82.5423 11.0586C82.2561 11.2556 82.113 11.5064 82.113 11.8111C82.113 12.0819 82.2115 12.2958 82.4084 12.4528C82.6054 12.6097 82.9132 12.7405 83.3317 12.8452L84.3843 13.1037C85.0183 13.2576 85.4907 13.493 85.8015 13.81C86.1124 14.1239 86.2678 14.5286 86.2678 15.0241C86.2678 15.4304 86.1508 15.7936 85.9169 16.1136C85.6861 16.4337 85.363 16.6861 84.9475 16.8707C84.532 17.0554 84.0488 17.1477 83.4979 17.1477C82.7747 17.1477 82.1761 16.9908 81.7021 16.6768C81.2281 16.3629 80.9281 15.9044 80.8019 15.3011L81.836 15.0426C81.9345 15.4242 82.1207 15.7105 82.3946 15.9013C82.6716 16.0921 83.0332 16.1875 83.4794 16.1875C83.9873 16.1875 84.3904 16.0798 84.689 15.8643C84.9906 15.6458 85.1414 15.3842 85.1414 15.0795C85.1414 14.8333 85.0552 14.6271 84.8829 14.4609C84.7105 14.2917 84.4458 14.1655 84.0888 14.0824L82.907 13.8054C82.2576 13.6515 81.7806 13.413 81.4759 13.0898C81.1743 12.7636 81.0235 12.3558 81.0235 11.8665C81.0235 11.4664 81.1358 11.1125 81.3605 10.8047C81.5882 10.4969 81.8975 10.2553 82.2884 10.0799C82.6823 9.90447 83.1286 9.81676 83.6272 9.81676C84.3289 9.81676 84.8798 9.97064 85.2799 10.2784C85.683 10.5862 85.9693 10.9924 86.1385 11.4972ZM90.8808 17.1477C90.1976 17.1477 89.6082 16.9969 89.1127 16.6953C88.6203 16.3906 88.2402 15.9659 87.9724 15.4212C87.7078 14.8733 87.5754 14.2363 87.5754 13.5099C87.5754 12.7836 87.7078 12.1435 87.9724 11.5895C88.2402 11.0324 88.6126 10.5985 89.0896 10.2876C89.5697 9.97372 90.1299 9.81676 90.77 9.81676C91.1393 9.81676 91.504 9.87831 91.8641 10.0014C92.2242 10.1245 92.552 10.3246 92.8474 10.6016C93.1429 10.8755 93.3783 11.2386 93.5538 11.6911C93.7292 12.1435 93.8169 12.7005 93.8169 13.3622V13.8239H88.351V12.8821H92.7089C92.7089 12.482 92.6289 12.125 92.4689 11.8111C92.3119 11.4972 92.0873 11.2494 91.7949 11.0678C91.5056 10.8862 91.164 10.7955 90.77 10.7955C90.3361 10.7955 89.9606 10.9032 89.6436 11.1186C89.3297 11.331 89.0881 11.608 88.9188 11.9496C88.7495 12.2912 88.6649 12.6574 88.6649 13.0483V13.6761C88.6649 14.2116 88.7572 14.6656 88.9419 15.038C89.1296 15.4073 89.3897 15.6889 89.7221 15.8828C90.0545 16.0736 90.4407 16.169 90.8808 16.169C91.167 16.169 91.4256 16.129 91.6564 16.049C91.8903 15.9659 92.0919 15.8428 92.2611 15.6797C92.4304 15.5135 92.5612 15.3073 92.6535 15.0611L93.7061 15.3565C93.5953 15.7135 93.4091 16.0275 93.1475 16.2983C92.8859 16.5661 92.5628 16.7753 92.178 16.9261C91.7933 17.0739 91.3609 17.1477 90.8808 17.1477ZM98.1518 17.1477C97.5609 17.1477 97.0392 16.9985 96.5868 16.6999C96.1344 16.3983 95.7804 15.9736 95.525 15.4258C95.2695 14.8749 95.1418 14.224 95.1418 13.473C95.1418 12.7282 95.2695 12.0819 95.525 11.5341C95.7804 10.9863 96.1359 10.5631 96.5914 10.2646C97.0469 9.96603 97.5732 9.81676 98.1702 9.81676C98.6319 9.81676 98.9966 9.8937 99.2643 10.0476C99.5352 10.1984 99.7414 10.3707 99.8829 10.5646C100.028 10.7554 100.14 10.9124 100.22 11.0355H100.312V7.54545H101.402V17H100.349V15.9105H100.22C100.14 16.0398 100.026 16.2029 99.8783 16.3999C99.7306 16.5937 99.5198 16.7676 99.2459 16.9215C98.972 17.0723 98.6073 17.1477 98.1518 17.1477ZM98.2995 16.169C98.7365 16.169 99.1058 16.0552 99.4074 15.8274C99.7091 15.5966 99.9383 15.2781 100.095 14.8718C100.252 14.4625 100.331 13.9901 100.331 13.4545C100.331 12.9252 100.254 12.462 100.1 12.065C99.946 11.6649 99.7183 11.354 99.4167 11.1325C99.1151 10.9078 98.7427 10.7955 98.2995 10.7955C97.8378 10.7955 97.4531 10.9139 97.1454 11.1509C96.8407 11.3848 96.6114 11.7034 96.4575 12.1065C96.3067 12.5066 96.2313 12.956 96.2313 13.4545C96.2313 13.9593 96.3083 14.4179 96.4621 14.8303C96.6191 15.2396 96.8499 15.5658 97.1546 15.8089C97.4624 16.049 97.844 16.169 98.2995 16.169Z'
              fill='#002736'
            />
          </svg>
        </div>

        <span>3 of 3 steps</span>
      </div>

      <div className={styles.pricingtimebased}>
        <span className={styles.reschedulebook}>Choose Day and Time</span>

        <div className={styles.inputtime}>
          <div className={`${styles.warning} ${styles.firstwarning}`}>
            <svg
              width='14'
              height='15'
              viewBox='0 0 14 15'
              fill='none'
              xmlns='http://www.w3.org/2000/svg'
            >
              <g clipPath='url(#clip0_8381_1228)'>
                <path
                  d='M7 14.0625C5.70206 14.0625 4.43327 13.6776 3.35407 12.9565C2.27488 12.2354 1.43374 11.2105 0.937043 10.0114C0.440343 8.81222 0.310384 7.49272 0.5636 6.21972C0.816815 4.94672 1.44183 3.7774 2.35961 2.85961C3.2774 1.94183 4.44672 1.31682 5.71972 1.0636C6.99272 0.810384 8.31222 0.940343 9.51136 1.43704C10.7105 1.93374 11.7354 2.77488 12.4565 3.85407C13.1776 4.93327 13.5625 6.20206 13.5625 7.5C13.5625 9.24049 12.8711 10.9097 11.6404 12.1404C10.4097 13.3711 8.74049 14.0625 7 14.0625ZM7 1.8125C5.87512 1.8125 4.7755 2.14607 3.8402 2.77102C2.90489 3.39597 2.17591 4.28424 1.74544 5.32349C1.31496 6.36274 1.20233 7.50631 1.42179 8.60958C1.64124 9.71285 2.18292 10.7263 2.97833 11.5217C3.77374 12.3171 4.78716 12.8588 5.89043 13.0782C6.99369 13.2977 8.13726 13.185 9.17651 12.7546C10.2158 12.3241 11.104 11.5951 11.729 10.6598C12.3539 9.7245 12.6875 8.62488 12.6875 7.5C12.6875 5.99158 12.0883 4.54495 11.0217 3.47833C9.95506 2.41172 8.50842 1.8125 7 1.8125Z'
                  fill='#EBF9FF'
                />
                <path
                  d='M7 11C6.82694 11 6.65777 10.9487 6.51388 10.8525C6.36998 10.7564 6.25783 10.6197 6.19161 10.4598C6.12538 10.3 6.10805 10.124 6.14181 9.9543C6.17558 9.78456 6.25891 9.62865 6.38128 9.50628C6.50365 9.38391 6.65956 9.30057 6.8293 9.26681C6.99903 9.23305 7.17496 9.25038 7.33485 9.31661C7.49473 9.38283 7.63139 9.49498 7.72754 9.63888C7.82368 9.78277 7.875 9.95194 7.875 10.125C7.875 10.3571 7.78281 10.5796 7.61872 10.7437C7.45462 10.9078 7.23206 11 7 11ZM7 8.375C6.88397 8.375 6.77269 8.32891 6.69064 8.24686C6.60859 8.16481 6.5625 8.05353 6.5625 7.9375V4C6.5625 3.88397 6.60859 3.77269 6.69064 3.69064C6.77269 3.60859 6.88397 3.5625 7 3.5625C7.11603 3.5625 7.22731 3.60859 7.30936 3.69064C7.39141 3.77269 7.4375 3.88397 7.4375 4V7.9375C7.4375 8.05353 7.39141 8.16481 7.30936 8.24686C7.22731 8.32891 7.11603 8.375 7 8.375Z'
                  fill='#EBF9FF'
                />
              </g>
              <defs>
                <clipPath id='clip0_8381_1228'>
                  <rect
                    width='14'
                    height='14'
                    fill='white'
                    transform='translate(0 0.5)'
                  />
                </clipPath>
              </defs>
            </svg>
            <span>Make sure to input time in every selected day</span>
          </div>
          <div className={styles.time}>
            <Time
              setCheckedDays={setCheckedDays}
              setSelectedFrom={setSelectedFrom}
              setSelectedTo={setSelectedTo}
              checkedDays={checkedDays}
              selectedFrom={selectedFrom}
              selectedTo={selectedTo}
            />
          </div>
          <div className={styles.done}>
            <button className={styles.canceltime}>Cancel</button>
            <button className={styles.donetime} onClick={Submit}>
              Done
            </button>
          </div>
        </div>
      </div>
    </section>
  );
}
